---
import ToolCard from './ToolCard.astro';
import LoadingState from './LoadingState.astro';
import { tools } from '../data';
import { BRAND_NAME } from '../constants/brand';

// Get unique categories for filter dropdown
const categories = ['All', ...new Set(tools.map(tool => tool.category))];
---

<div id="app" class="container mx-auto px-4 py-8 font-inter">
    <div id="loadingState" class="block transition-opacity duration-500 ease-in-out">
        <LoadingState />
    </div>

    <div id="mainContent" class="hidden opacity-0 transition-all duration-300 ease-out transform translate-y-0">
    <h1 class="text-4xl font-rubik font-bold text-center mb-8 text-gray-800">
        {BRAND_NAME}
    </h1>
    
    <div class="mb-6 flex flex-col sm:flex-row gap-4 justify-center sm:justify-start relative">
        <div class="relative w-full sm:w-64 group">
            <input
                type="text"
                id="searchInput"
                placeholder="Search tools..."
                class="w-full bg-white border border-gray-300 rounded-xl py-3 pl-12 pr-4 text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent hover:border-gray-400 transition-colors duration-200"
            />
            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none text-gray-500">
                <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                </svg>
            </div>
        </div>
        <div class="relative w-full sm:w-64 group">
            <select 
                id="categoryFilter" 
                class="appearance-none w-full bg-white border border-gray-300 rounded-xl py-3 pl-12 pr-10 text-gray-700 cursor-pointer focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent hover:border-gray-400 transition-colors duration-200 font-medium"
                aria-label="Filter tools by category"
            >
                {categories.map(category => (
                    <option value={category} class="py-2 font-medium">{category}</option>
                ))}
            </select>
            <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-4 text-gray-500 group-hover:text-gray-700 transition-colors duration-200">
                <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
            </div>
            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none text-gray-500 group-hover:text-gray-700 transition-colors duration-200">
                <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7"></path>
                </svg>
            </div>
        </div>
    </div>

    <div class="-mx-4 sm:mx-0">
        <div class="overflow-x-auto">
            <div class="inline-block min-w-full align-middle">
                <div class="overflow-hidden border border-gray-200 sm:rounded-lg shadow-sm bg-white">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th scope="col" class="px-4 sm:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Icon</th>
                                <th scope="col" class="px-4 sm:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                                <th scope="col" class="px-4 sm:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider hidden md:table-cell">Description</th>
                                <th scope="col" class="px-4 sm:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider hidden sm:table-cell">Category</th>
                                <th scope="col" class="px-4 sm:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Links</th>
                            </tr>
                        </thead>
                        <tbody id="toolsTableBody" class="bg-white divide-y divide-gray-200 [&>tr]:h-[72px]">
                            {tools.map(tool => (
                                <ToolCard 
                                    icon={tool.icon}
                                    name={tool.name}
                                    description={tool.description}
                                    category={tool.category}
                                    docsLink={tool.docsLink}
                                    githubLink={tool.githubLink}
                                />
                            ))}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // Initialize loading state handler
    function initializeLoadingState() {
        // 在页面加载完成后执行过渡
        const loadingState = document.getElementById('loadingState');
        const mainContent = document.getElementById('mainContent');

        if (!loadingState || !mainContent) {
            console.warn('Required elements not found');
            return;
        }

        // Initialize search and filter functionality
        const searchInput = document.getElementById('searchInput') as HTMLInputElement;
        const categoryFilter = document.getElementById('categoryFilter') as HTMLSelectElement;
        const toolsTableBody = document.getElementById('toolsTableBody');
        const toolRows = Array.from(toolsTableBody?.getElementsByTagName('tr') || []);

        function filterTools() {
            const searchTerm = searchInput?.value?.toLowerCase().trim() || '';
            const selectedCategory = categoryFilter?.value || 'All';

            toolRows.forEach(row => {
                const name = row.querySelector('td:nth-child(2)')?.textContent?.toLowerCase() || '';
                const description = row.querySelector('td:nth-child(3)')?.textContent?.toLowerCase() || '';
                const category = row.querySelector('td:nth-child(4)')?.textContent?.trim() || '';

                const matchesSearch = searchTerm === '' || name.includes(searchTerm);
                const matchesCategory = selectedCategory === 'All' || category === selectedCategory;

                row.style.display = matchesSearch && matchesCategory ? '' : 'none';
            });
        }

        searchInput?.addEventListener('input', filterTools);
        categoryFilter?.addEventListener('change', filterTools);

        // Add click handlers for category cells
        toolRows.forEach(row => {
            const categoryCell = row.querySelector('td:nth-child(4)');
            if (categoryCell) {
                categoryCell.classList.add('cursor-pointer', 'hover:bg-gray-50', 'transition-colors', 'duration-150');
                categoryCell.addEventListener('click', () => {
                    const category = categoryCell.textContent?.trim() || '';
                    if (categoryFilter) {
                        categoryFilter.value = category;
                        filterTools();
                    }
                });
            }
        });

        const MIN_LOADING_TIME = 500;
        const startTime = Date.now();

        const performTransition = () => {
            if (loadingState) {
                loadingState.classList.add('opacity-0');
                setTimeout(() => {
                    loadingState.style.display = 'none';
                    if (mainContent) {
                        mainContent.style.display = 'block';
                        mainContent.classList.remove('hidden');
                        requestAnimationFrame(() => {
                            mainContent.classList.add('opacity-100');
                            mainContent.classList.remove('translate-y-0');
                        });
                    }
                }, 300);
            }

        };

        Promise.all([
            new Promise(resolve => setTimeout(resolve, MIN_LOADING_TIME)),
            Promise.all(
                Array.from(document.images)
                    .filter(img => !img.complete)
                    .map(img => new Promise((resolve, reject) => {
                        img.onload = () => resolve(img);
                        img.onerror = () => {
                            console.warn(`Failed to load image: ${img.src}`);
                            resolve(img); // Continue loading other images
                        };
                    }))
            )
        ]).then(() => {
            const timeElapsed = Date.now() - startTime;
            if (timeElapsed >= MIN_LOADING_TIME) {
                performTransition();
            } else {
                setTimeout(performTransition, MIN_LOADING_TIME - timeElapsed);
            }
        }).catch(error => {
            console.error('Error during loading:', error);
            performTransition();
        });
    }

    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeLoadingState);
    } else {
        initializeLoadingState();
    }
</script>

<script>
    const categoryFilter = document.getElementById('categoryFilter') as HTMLSelectElement;
    const toolsTableBody = document.getElementById('toolsTableBody') as HTMLTableSectionElement;

    function filterTools() {
        if (!categoryFilter || !toolsTableBody) return;

        const selectedCategory = categoryFilter.value;
        const rows = toolsTableBody.getElementsByTagName('tr');

        Array.from(rows).forEach((row: HTMLTableRowElement) => {
            const categoryCell = row.querySelector('td:nth-child(4)');
            if (!categoryCell) return;

            const rowCategory = categoryCell.textContent?.trim() || '';
            const shouldShow = selectedCategory === 'All' || rowCategory === selectedCategory;

            row.classList.toggle('hidden', !shouldShow);
            if (shouldShow) {
                row.style.display = '';
            } else {
                row.style.display = 'none';
            }
        });
    }

    categoryFilter?.addEventListener('change', filterTools);
    // Initial filter if elements exist
    if (categoryFilter && toolsTableBody) {
        filterTools();
    }
</script>

<style is:global>
    /* Import Inter font for UI */
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
    /* Import Rubik for headings */
    @import url('https://fonts.googleapis.com/css2?family=Rubik:wght@400;500;600;700&display=swap');

    .font-inter {
        font-family: 'Inter', system-ui, -apple-system, sans-serif;
    }

    .font-rubik {
        font-family: 'Rubik', system-ui, -apple-system, sans-serif;
    }
</style>
