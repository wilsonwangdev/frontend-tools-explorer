---
import ToolCard from './ToolCard.astro';
import LoadingState from './LoadingState.astro';
import Footer from './Footer.astro';
import TextLogo from './TextLogo.astro';
import { tools } from '../data';
import { BRAND_NAME } from '../constants/brand';

// Get unique categories for filter dropdown
const categories = ['All', ...new Set(tools.map(tool => tool.category))];
---

<div id="app" class="container mx-auto px-4 py-8 font-inter">
    <div id="loadingState" class="block transition-opacity duration-700 ease-in-out">
        <LoadingState />
    </div>

    <!-- Add a noscript fallback to ensure content is visible without JavaScript -->
    <noscript>
        <style>
            #loadingState { display: none !important; }
            #mainContent { 
                display: block !important; 
                opacity: 1 !important; 
                position: relative !important;
                visibility: visible !important;
                transform: none !important;
            }
        </style>
    </noscript>

    <div id="mainContent" class="hidden opacity-0 transition-all duration-700 ease-in-out transform translate-y-8 scale-[0.98]">
    <style>
        /* Ensure the content is fully rendered in memory but not visible */
        #mainContent {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            visibility: hidden;
            z-index: -1; /* Ensure it's behind the loading state */
        }
        
        /* When content is ready to be shown */
        #mainContent.content-visible {
            position: relative;
            visibility: visible;
            z-index: 1; /* Bring it to the front when visible */
            transform: translateY(0) scale(1) !important;
        }
    </style>
    <!-- Replace text-only brand name with the new TextLogo component -->
    <div class="mb-8">
        <TextLogo />
    </div>
    
    <div class="mb-6 flex flex-col sm:flex-row gap-4 justify-center sm:justify-start relative">
        <div class="relative w-full sm:w-64 group">
            <input
                type="text"
                id="searchInput"
                placeholder="Search tools..."
                class="w-full bg-white border border-gray-300 rounded-xl py-3 pl-12 pr-4 text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent hover:border-gray-400 transition-colors duration-200"
                aria-label="Search for tools"
                autocomplete="off"
            />
            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none text-gray-500">
                <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                </svg>
            </div>
        </div>
        <div class="relative w-full sm:w-64 group">
            <select 
                id="categoryFilter" 
                class="appearance-none w-full bg-white border border-gray-300 rounded-xl py-3 pl-12 pr-10 text-gray-700 cursor-pointer focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent hover:border-gray-400 transition-colors duration-200 font-medium"
                aria-label="Filter tools by category"
            >
                {categories.map(category => (
                    <option value={category} class="py-2 font-medium">{category}</option>
                ))}
            </select>
            <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-4 text-gray-500 group-hover:text-gray-700 transition-colors duration-200">
                <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
            </div>
            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none text-gray-500 group-hover:text-gray-700 transition-colors duration-200">
                <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7"></path>
                </svg>
            </div>
        </div>
    </div>

    <div class="-mx-4 sm:mx-0">
        <div class="overflow-x-auto">
            <div class="inline-block min-w-full align-middle">
                <div class="overflow-hidden border border-gray-200 sm:rounded-lg shadow-sm bg-white">
                    <table class="min-w-full divide-y divide-gray-200" role="grid" aria-label="Frontend tools list">
                        <thead class="bg-gray-50">
                            <tr>
                                <th scope="col" class="px-4 sm:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Icon</th>
                                <th scope="col" class="px-4 sm:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                                <th scope="col" class="px-4 sm:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider hidden md:table-cell">Description</th>
                                <th scope="col" class="px-4 sm:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider hidden sm:table-cell">Category</th>
                                <th scope="col" class="px-4 sm:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Links</th>
                            </tr>
                        </thead>
                        <tbody id="toolsTableBody" class="bg-white divide-y divide-gray-200 [&>tr]:h-[72px]">
                            {/* TODO: Optimize rendering with pagination or lazy loading on scroll for better performance */}
                            {tools.map(tool => (
                                <ToolCard 
                                    icon={tool.icon}
                                    name={tool.name}
                                    description={tool.description}
                                    category={tool.category}
                                    docsLink={tool.docsLink}
                                    githubLink={tool.githubLink}
                                />
                            ))}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Footer component -->
    <div class="flex flex-col items-center">
      <Footer />
    </div>
</div>

<script define:vars={{ tools }}>
    // Make tools data available to client-side JavaScript
    window.TOOLS_DATA = tools;
    
    // Function to set up lazy loading for images
    function setupLazyLoading() {
        if ('IntersectionObserver' in window) {
            const imageObserver = new IntersectionObserver((entries, observer) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const img = entry.target;
                        const src = img.getAttribute('data-src');
                        if (src) {
                            img.setAttribute('src', src);
                            img.removeAttribute('data-src');
                        }
                        observer.unobserve(img);
                    }
                });
            });

            // Get all images with data-src attribute
            document.querySelectorAll('img[data-src]').forEach(img => {
                imageObserver.observe(img);
            });
        } else {
            // Fallback for browsers that don't support Intersection Observer
            document.querySelectorAll('img[data-src]').forEach(img => {
                const src = img.getAttribute('data-src');
                if (src) {
                    img.setAttribute('src', src);
                    img.removeAttribute('data-src');
                }
            });
        }
    }

    // Initialize loading state handler
    function initializeLoadingState() {
        // After page load, execute transition
        const loadingState = document.getElementById('loadingState');
        const mainContent = document.getElementById('mainContent');

        if (!loadingState || !mainContent) {
            console.warn('Required elements not found');
            return;
        }
        
        // Set a timeout to ensure content is shown even if loading takes too long
        const maxLoadingTime = 3000; // 3 seconds max loading time
        const forceShowTimeout = setTimeout(() => {
            console.log('Force showing content due to timeout');
            if (loadingState) {
                loadingState.style.display = 'none';
                loadingState.classList.add('opacity-0');
            }
            if (mainContent) {
                mainContent.classList.add('content-visible');
                mainContent.style.display = 'block';
                mainContent.classList.remove('hidden');
                mainContent.classList.add('opacity-100');
                mainContent.classList.remove('opacity-0');
            }
        }, maxLoadingTime);
        
        // Setup keyboard navigation for tool cards
        setupKeyboardNavigation();

        // Initialize search and filter functionality
        const searchInput = document.getElementById('searchInput');
        const categoryFilter = document.getElementById('categoryFilter');
        const toolsTableBody = document.getElementById('toolsTableBody');
        const toolRows = Array.from(toolsTableBody?.getElementsByTagName('tr') || []);

        function filterTools() {
            const searchTerm = searchInput?.value?.toLowerCase().trim() || '';
            const selectedCategory = categoryFilter?.value || 'All';

            toolRows.forEach(row => {
                const name = row.querySelector('td:nth-child(2)')?.textContent?.toLowerCase() || '';
                const description = row.querySelector('td:nth-child(3)')?.textContent?.toLowerCase() || '';
                const category = row.querySelector('td:nth-child(4)')?.textContent?.trim() || '';

                const matchesSearch = searchTerm === '' || name.includes(searchTerm);
                const matchesCategory = selectedCategory === 'All' || category === selectedCategory;

                row.style.display = matchesSearch && matchesCategory ? '' : 'none';
            });
        }

        searchInput?.addEventListener('input', filterTools);
        categoryFilter?.addEventListener('change', filterTools);

        // Add click handlers for category cells
        toolRows.forEach(row => {
            const categoryCell = row.querySelector('td:nth-child(4)');
            if (categoryCell) {
                categoryCell.classList.add('cursor-pointer', 'hover:bg-gray-50', 'transition-colors', 'duration-150');
                categoryCell.addEventListener('click', () => {
                    const category = categoryCell.textContent?.trim() || '';
                    if (categoryFilter) {
                        categoryFilter.value = category;
                        filterTools();
                    }
                });
            }
        });

        const MIN_LOADING_TIME = 800;
        const startTime = Date.now();

        const performTransition = () => {
            // Clear the force show timeout since we're transitioning normally
            clearTimeout(forceShowTimeout);
            
            if (loadingState && mainContent) {
                // First make the main content ready but still invisible
                mainContent.classList.add('content-visible');
                mainContent.style.display = 'block';
                mainContent.classList.remove('hidden');
                
                // Small delay to ensure the DOM updates before animation
                setTimeout(() => {
                    // Start fading out loading state
                    loadingState.classList.add('opacity-0');
                    
                    // Start fading in content with a slight delay for a smoother handoff
                    setTimeout(() => {
                        mainContent.classList.add('opacity-100');
                        mainContent.classList.remove('opacity-0');
                        // Apply transform changes for a smooth animation
                        mainContent.style.transform = 'translateY(0) scale(1)';
                    }, 150);
                    
                    // After transition completes, hide loading state completely
                    setTimeout(() => {
                        loadingState.style.display = 'none';
                        console.log('Transition complete - content visible');
                    }, 700);
                }, 100);
            }
        };

        // TODO: Implement lazy loading or pagination for better performance
        // This could involve:
        // 1. Implementing infinite scroll with IntersectionObserver
        // 2. Adding pagination controls
        // 3. Using virtualized lists for large datasets

        Promise.all([
            new Promise(resolve => setTimeout(resolve, MIN_LOADING_TIME)),
            Promise.all(
                Array.from(document.images)
                    .filter(img => !img.complete)
                    .map(img => new Promise((resolve, reject) => {
                        img.onload = () => resolve(img);
                        img.onerror = () => {
                            console.warn(`Failed to load image: ${img.src}`);
                            resolve(img); // Continue loading other images
                        };
                    }))
            )
        ]).then(() => {
            const timeElapsed = Date.now() - startTime;
            if (timeElapsed >= MIN_LOADING_TIME) {
                performTransition();
            } else {
                setTimeout(performTransition, MIN_LOADING_TIME - timeElapsed);
            }
        }).catch(error => {
            console.error('Error during loading:', error);
            // Fallback: Show content directly if loading fails
            if (mainContent) {
                loadingState?.style.setProperty('display', 'none');
                mainContent.classList.add('content-visible');
                mainContent.style.display = 'block';
                mainContent.classList.remove('hidden');
                mainContent.classList.add('opacity-100');
                mainContent.classList.remove('opacity-0');
            }
            performTransition();
            
            // Set up lazy loading for images
            setTimeout(() => {
                setupLazyLoading();
            }, 500); // Wait a bit after the transition
        });
    }

    // Setup keyboard navigation for tool cards
    function setupKeyboardNavigation() {
        const toolRows = document.querySelectorAll('#toolsTableBody tr');
        
        toolRows.forEach((row, index) => {
            row.addEventListener('keydown', (e) => {
                // Handle Enter key to activate links
                if (e.key === 'Enter') {
                    const docsLink = row.querySelector('a[aria-label*="documentation"]');
                    if (docsLink) {
                        docsLink.click();
                    }
                }
                
                // Handle arrow keys for navigation
                if (e.key === 'ArrowDown' && index < toolRows.length - 1) {
                    e.preventDefault();
                    toolRows[index + 1].focus();
                }
                
                if (e.key === 'ArrowUp' && index > 0) {
                    e.preventDefault();
                    toolRows[index - 1].focus();
                }
            });
        });
    }

    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            initializeLoadingState();
            // Set up lazy loading for the initial images
            setupLazyLoading();
        });
    } else {
        initializeLoadingState();
        // Set up lazy loading for the initial images
        setupLazyLoading();
    }
    
    // Re-initialize keyboard navigation after view transitions
    document.addEventListener('astro:page-load', function() {
        setupKeyboardNavigation();
    });
</script>

<script>
    const categoryFilter = document.getElementById('categoryFilter') as HTMLSelectElement;
    const toolsTableBody = document.getElementById('toolsTableBody') as HTMLTableSectionElement;

    function filterTools() {
        if (!categoryFilter || !toolsTableBody) return;

        const selectedCategory = categoryFilter.value;
        const rows = toolsTableBody.getElementsByTagName('tr');

        Array.from(rows).forEach((row: HTMLTableRowElement) => {
            const categoryCell = row.querySelector('td:nth-child(4)');
            if (!categoryCell) return;

            const rowCategory = categoryCell.textContent?.trim() || '';
            const shouldShow = selectedCategory === 'All' || rowCategory === selectedCategory;

            row.classList.toggle('hidden', !shouldShow);
            if (shouldShow) {
                row.style.display = '';
            } else {
                row.style.display = 'none';
            }
        });
    }

    categoryFilter?.addEventListener('change', filterTools);
    // Initial filter if elements exist
    if (categoryFilter && toolsTableBody) {
        filterTools();
    }
</script>

<style is:global>
    /* Import Inter font for UI */
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
    /* Import Rubik for headings */
    @import url('https://fonts.googleapis.com/css2?family=Rubik:wght@400;500;600;700&display=swap');

    .font-inter {
        font-family: 'Inter', system-ui, -apple-system, sans-serif;
    }

    .font-rubik {
        font-family: 'Rubik', system-ui, -apple-system, sans-serif;
    }
</style>
