---
interface Props {
  text: string;
  category: string;
}

const { text, category } = Astro.props;

// Available colors for random selection with varied intensities
const colors = [
  { bg: 'bg-blue-100', text: 'text-blue-800' },
  { bg: 'bg-blue-50', text: 'text-blue-600' },
  { bg: 'bg-green-100', text: 'text-green-800' },
  { bg: 'bg-green-50', text: 'text-green-600' },
  { bg: 'bg-purple-100', text: 'text-purple-800' },
  { bg: 'bg-purple-50', text: 'text-purple-600' },
  { bg: 'bg-yellow-100', text: 'text-yellow-800' },
  { bg: 'bg-yellow-50', text: 'text-yellow-600' },
  { bg: 'bg-pink-100', text: 'text-pink-800' },
  { bg: 'bg-pink-50', text: 'text-pink-600' },
  { bg: 'bg-orange-100', text: 'text-orange-800' },
  { bg: 'bg-orange-50', text: 'text-orange-600' },
  { bg: 'bg-indigo-100', text: 'text-indigo-800' },
  { bg: 'bg-indigo-50', text: 'text-indigo-600' },
  { bg: 'bg-red-100', text: 'text-red-800' },
  { bg: 'bg-red-50', text: 'text-red-600' },
  { bg: 'bg-teal-100', text: 'text-teal-800' },
  { bg: 'bg-teal-50', text: 'text-teal-600' },
  { bg: 'bg-cyan-100', text: 'text-cyan-800' },
  { bg: 'bg-cyan-50', text: 'text-cyan-600' },
  { bg: 'bg-emerald-100', text: 'text-emerald-800' },
  { bg: 'bg-emerald-50', text: 'text-emerald-600' },
  { bg: 'bg-violet-100', text: 'text-violet-800' },
  { bg: 'bg-violet-50', text: 'text-violet-600' },
  { bg: 'bg-rose-100', text: 'text-rose-800' },
  { bg: 'bg-rose-50', text: 'text-rose-600' },
  { bg: 'bg-slate-100', text: 'text-slate-800' },
  { bg: 'bg-slate-50', text: 'text-slate-600' },
  { bg: 'bg-zinc-100', text: 'text-zinc-800' },
  { bg: 'bg-zinc-50', text: 'text-zinc-600' }
];

// Get consistent color based on tool name with better string hashing
const getColorFromText = (text: string) => {
  // Use djb2 hash algorithm for better distribution
  const hash = text.split('').reduce((acc, char) => {
    const charCode = char.toUpperCase().charCodeAt(0);
    return ((acc << 5) + acc) + charCode; // acc * 33 + charCode
  }, 5381);
  
  // Ensure positive index and good distribution
  const positiveHash = Math.abs(hash);
  const colorIndex = positiveHash % colors.length;
  return colors[colorIndex];
};

const firstLetter = text[0].toUpperCase();
const selectedColor = getColorFromText(text);
---

<div class={`w-6 h-6 rounded-md flex items-center justify-center ${selectedColor.bg}`}>
  <span class={`text-xs font-semibold ${selectedColor.text}`}>{firstLetter}</span>
</div>